# Generated by Django 5.2.6 on 2025-09-13 12:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0004_remove_rating_additional_notes'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workload_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for workload rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('difficulty_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for difficulty rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('learning_gain_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for learning gain rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('teaching_quality_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for teaching quality rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assessment_fairness_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for assessment fairness rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('practical_theoretical_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for practical/theoretical balance (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('relevance_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for relevance rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('materials_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for materials rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('support_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for support rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('organization_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for organization rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('assessment_fairness_weight__gte', 0), ('assessment_fairness_weight__lte', 100), ('difficulty_weight__gte', 0), ('difficulty_weight__lte', 100), ('learning_gain_weight__gte', 0), ('learning_gain_weight__lte', 100), ('materials_weight__gte', 0), ('materials_weight__lte', 100), ('organization_weight__gte', 0), ('organization_weight__lte', 100), ('practical_theoretical_weight__gte', 0), ('practical_theoretical_weight__lte', 100), ('relevance_weight__gte', 0), ('relevance_weight__lte', 100), ('support_weight__gte', 0), ('support_weight__lte', 100), ('teaching_quality_weight__gte', 0), ('teaching_quality_weight__lte', 100), ('workload_weight__gte', 0), ('workload_weight__lte', 100)), name='weights_between_0_100')],
            },
        ),
    ]
