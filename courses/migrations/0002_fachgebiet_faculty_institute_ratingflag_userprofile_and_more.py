# Generated by Django 5.2.6 on 2025-09-13 23:47

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Fachgebiet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Subject area name (e.g., Algorithms, Statistics)', max_length=255, unique=True)),
                ('professor', models.CharField(help_text='Professor or instructor name', max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Fachgebiete',
                'ordering': ['institute__faculty__name', 'institute__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Faculties',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'ordering': ['faculty__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RatingFlag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for flagging this rating', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workload_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for workload rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('difficulty_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for difficulty rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('learning_gain_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for learning gain rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('teaching_quality_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for teaching quality rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('assessment_fairness_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for assessment fairness rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('practical_theoretical_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for practical/theoretical balance (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('relevance_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for relevance rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('materials_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for materials rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('support_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for support rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('organization_weight', models.PositiveSmallIntegerField(default=20, help_text='Weight for organization rating (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('practical_theoretical_preference', models.PositiveSmallIntegerField(default=50, help_text="User's preference on theory-practical spectrum (0=Very Theoretical, 100=Very Practical)", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text="Visitor's IP address")),
                ('user_agent', models.TextField(blank=True, help_text="Visitor's user agent string")),
                ('referer', models.URLField(blank=True, help_text='Referring URL', null=True)),
                ('path', models.CharField(help_text='Page path visited', max_length=500)),
                ('query_string', models.CharField(blank=True, help_text='URL query parameters', max_length=1000)),
                ('method', models.CharField(default='GET', help_text='HTTP method', max_length=10)),
                ('status_code', models.PositiveSmallIntegerField(default=200, help_text='HTTP response status code')),
                ('session_key', models.CharField(blank=True, help_text='Django session key', max_length=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.RemoveConstraint(
            model_name='rating',
            name='uniq_user_course_term',
        ),
        migrations.AddField(
            model_name='rating',
            name='assessment_fairness_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Assessment Fairness (1=Very unfair, 5=Very fair)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='assessment_fairness_text',
            field=models.TextField(blank=True, help_text='Additional details about assessment fairness', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='difficulty_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Perceived Difficulty (1=Very easy, 5=Extremely hard)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='difficulty_text',
            field=models.TextField(blank=True, help_text='Additional details about difficulty', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='is_disabled',
            field=models.BooleanField(default=False, help_text='Disable this rating from being displayed'),
        ),
        migrations.AddField(
            model_name='rating',
            name='learning_gain_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Learning Gain (1=None, 5=A great deal)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='learning_gain_text',
            field=models.TextField(blank=True, help_text='Additional details about learning gain', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='materials_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Materials & Resources (1=Very poor, 5=Excellent)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='materials_text',
            field=models.TextField(blank=True, help_text='Additional details about materials and resources', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='organization_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Course Organization (1=Chaotic, 5=Very well organized)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='organization_text',
            field=models.TextField(blank=True, help_text='Additional details about course organization', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='practical_theoretical_balance',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Practical ↔ Theoretical Balance (0=Purely theoretical, 100=Highly practical)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='practical_theoretical_text',
            field=models.TextField(blank=True, help_text='Additional details about practical/theoretical balance', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='relevance_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Relevance/Applicability (1=Not relevant, 5=Highly relevant)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='relevance_text',
            field=models.TextField(blank=True, help_text='Additional details about relevance/applicability', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='support_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Support & Responsiveness (1=Unresponsive, 5=Very responsive)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='support_text',
            field=models.TextField(blank=True, help_text='Additional details about support and responsiveness', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='teaching_quality_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Teaching Quality (1=Very poor, 5=Excellent)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='teaching_quality_text',
            field=models.TextField(blank=True, help_text='Additional details about teaching quality', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='workload_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Workload/Time Required (1=≤3h, 2=4–6h, 3=7–9h, 4=10–12h, 5=≥13h)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='workload_text',
            field=models.TextField(blank=True, help_text='Additional details about workload (e.g., ECTS credits, specific time breakdown)', max_length=500),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.UniqueConstraint(fields=('course', 'user'), name='uniq_user_course'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('workload_rating__gte', 1), ('workload_rating__lte', 5)), name='workload_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('difficulty_rating__gte', 1), ('difficulty_rating__lte', 5)), name='difficulty_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('learning_gain_rating__gte', 1), ('learning_gain_rating__lte', 5)), name='learning_gain_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('teaching_quality_rating__gte', 1), ('teaching_quality_rating__lte', 5)), name='teaching_quality_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('assessment_fairness_rating__gte', 1), ('assessment_fairness_rating__lte', 5)), name='assessment_fairness_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('practical_theoretical_balance__gte', 0), ('practical_theoretical_balance__lte', 100)), name='practical_theoretical_balance_between_0_100'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('relevance_rating__gte', 1), ('relevance_rating__lte', 5)), name='relevance_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('materials_rating__gte', 1), ('materials_rating__lte', 5)), name='materials_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('support_rating__gte', 1), ('support_rating__lte', 5)), name='support_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('organization_rating__gte', 1), ('organization_rating__lte', 5)), name='organization_rating_between_1_5'),
        ),
        migrations.AddField(
            model_name='course',
            name='fachgebiet',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='courses.fachgebiet'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['fachgebiet'], name='courses_cou_fachgeb_62d16b_idx'),
        ),
        migrations.AddField(
            model_name='institute',
            name='faculty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='institutes', to='courses.faculty'),
        ),
        migrations.AddField(
            model_name='fachgebiet',
            name='institute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fachgebiete', to='courses.institute'),
        ),
        migrations.AddField(
            model_name='ratingflag',
            name='flagged_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating_flags', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ratingflag',
            name='rating',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flags', to='courses.rating'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='visitor',
            name='user',
            field=models.ForeignKey(blank=True, help_text='Logged in user (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='ratingflag',
            index=models.Index(fields=['-created_at'], name='courses_rat_created_ca3db5_idx'),
        ),
        migrations.AddIndex(
            model_name='ratingflag',
            index=models.Index(fields=['rating'], name='courses_rat_rating__6ce7a3_idx'),
        ),
        migrations.AddIndex(
            model_name='ratingflag',
            index=models.Index(fields=['flagged_by'], name='courses_rat_flagged_4ba204_idx'),
        ),
        migrations.AddConstraint(
            model_name='ratingflag',
            constraint=models.UniqueConstraint(fields=('rating', 'flagged_by'), name='uniq_user_rating_flag'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.CheckConstraint(condition=models.Q(('assessment_fairness_weight__gte', 0), ('assessment_fairness_weight__lte', 100), ('difficulty_weight__gte', 0), ('difficulty_weight__lte', 100), ('learning_gain_weight__gte', 0), ('learning_gain_weight__lte', 100), ('materials_weight__gte', 0), ('materials_weight__lte', 100), ('organization_weight__gte', 0), ('organization_weight__lte', 100), ('practical_theoretical_preference__gte', 0), ('practical_theoretical_preference__lte', 100), ('practical_theoretical_weight__gte', 0), ('practical_theoretical_weight__lte', 100), ('relevance_weight__gte', 0), ('relevance_weight__lte', 100), ('support_weight__gte', 0), ('support_weight__lte', 100), ('teaching_quality_weight__gte', 0), ('teaching_quality_weight__lte', 100), ('workload_weight__gte', 0), ('workload_weight__lte', 100)), name='weights_and_preference_between_0_100'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['-created_at'], name='courses_vis_created_67a7b1_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['ip_address'], name='courses_vis_ip_addr_6f7d77_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['path'], name='courses_vis_path_6538fe_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['user'], name='courses_vis_user_id_e8914f_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['created_at', 'ip_address'], name='courses_vis_created_84aa19_idx'),
        ),
    ]
