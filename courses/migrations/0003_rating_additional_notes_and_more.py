# Generated by Django 5.2.6 on 2025-09-13 11:22

import django.core.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0002_remove_rating_uniq_user_course_term_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='rating',
            name='additional_notes',
            field=models.TextField(blank=True, help_text='Any other comments or observations about the course', max_length=2000),
        ),
        migrations.AddField(
            model_name='rating',
            name='assessment_fairness_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Assessment Fairness (1=Very unfair, 5=Very fair)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='assessment_fairness_text',
            field=models.TextField(blank=True, help_text='Additional details about assessment fairness', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='difficulty_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Perceived Difficulty (1=Very easy, 5=Extremely hard)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='difficulty_text',
            field=models.TextField(blank=True, help_text='Additional details about difficulty', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='learning_gain_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Learning Gain (1=None, 5=A great deal)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='learning_gain_text',
            field=models.TextField(blank=True, help_text='Additional details about learning gain', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='materials_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Materials & Resources (1=Very poor, 5=Excellent)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='materials_text',
            field=models.TextField(blank=True, help_text='Additional details about materials and resources', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='organization_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Course Organization (1=Chaotic, 5=Very well organized)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='organization_text',
            field=models.TextField(blank=True, help_text='Additional details about course organization', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='practical_theoretical_balance',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Practical ↔ Theoretical Balance (0=Purely theoretical, 100=Highly practical)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='practical_theoretical_text',
            field=models.TextField(blank=True, help_text='Additional details about practical/theoretical balance', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='relevance_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Relevance/Applicability (1=Not relevant, 5=Highly relevant)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='relevance_text',
            field=models.TextField(blank=True, help_text='Additional details about relevance/applicability', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='support_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Support & Responsiveness (1=Unresponsive, 5=Very responsive)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='support_text',
            field=models.TextField(blank=True, help_text='Additional details about support and responsiveness', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='teaching_quality_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Teaching Quality (1=Very poor, 5=Excellent)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='teaching_quality_text',
            field=models.TextField(blank=True, help_text='Additional details about teaching quality', max_length=500),
        ),
        migrations.AddField(
            model_name='rating',
            name='workload_rating',
            field=models.PositiveSmallIntegerField(blank=True, help_text='Workload/Time Required (1=≤3h, 2=4–6h, 3=7–9h, 4=10–12h, 5=≥13h)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),
        ),
        migrations.AddField(
            model_name='rating',
            name='workload_text',
            field=models.TextField(blank=True, help_text='Additional details about workload (e.g., ECTS credits, specific time breakdown)', max_length=500),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('workload_rating__gte', 1), ('workload_rating__lte', 5)), name='workload_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('difficulty_rating__gte', 1), ('difficulty_rating__lte', 5)), name='difficulty_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('learning_gain_rating__gte', 1), ('learning_gain_rating__lte', 5)), name='learning_gain_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('teaching_quality_rating__gte', 1), ('teaching_quality_rating__lte', 5)), name='teaching_quality_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('assessment_fairness_rating__gte', 1), ('assessment_fairness_rating__lte', 5)), name='assessment_fairness_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('practical_theoretical_balance__gte', 0), ('practical_theoretical_balance__lte', 100)), name='practical_theoretical_balance_between_0_100'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('relevance_rating__gte', 1), ('relevance_rating__lte', 5)), name='relevance_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('materials_rating__gte', 1), ('materials_rating__lte', 5)), name='materials_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('support_rating__gte', 1), ('support_rating__lte', 5)), name='support_rating_between_1_5'),
        ),
        migrations.AddConstraint(
            model_name='rating',
            constraint=models.CheckConstraint(condition=models.Q(('organization_rating__gte', 1), ('organization_rating__lte', 5)), name='organization_rating_between_1_5'),
        ),
    ]
