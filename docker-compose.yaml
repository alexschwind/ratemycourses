services:
  traefik:
    image: traefik
    command:
      - "--accesslog=true"
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=info@ratemycourses.de"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entryPoints.web.forwardedHeaders.insecure"
      - "--entryPoints.websecure.forwardedHeaders.insecure"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
  watchtower:
    image: containrrr/watchtower
    command:
      - "--interval"
      - "30"
      - "--cleanup"            # remove old images after update
      - "--label-enable"
      - "--rolling-restart"       # restart one-by-one if multiple replicas (safe anyway)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  django:
    image: ghcr.io/alexschwind/ratemycourses:latest
    command: gunicorn ratemycourses.wsgi:application --bind 0.0.0.0:8000 --workers 3
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - MAILGUN_API_KEY=${MAILGUN_API_KEY}
      - MAILGUN_DOMAIN=${MAILGUN_DOMAIN}
      - OWNER_NAME=${OWNER_NAME}
      - OWNER_ADDRESS=${OWNER_ADDRESS}
      - OWNER_CITY=${OWNER_CITY}
      - OWNER_EMAIL=${OWNER_EMAIL}
    depends_on:
      - postgres
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 3
    healthcheck:
      test: ["CMD-SHELL","python manage.py check --deploy || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`ratemycourses.de`)"
      - "traefik.http.routers.django.entrypoints=websecure"
      - "traefik.http.routers.django.tls.certresolver=myresolver"
      # Enable watchtower
      - "com.centurylinklabs.watchtower.enable=true"
  
  postgres:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ratemycourses"]
      interval: 1m30s
      timeout: 30s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  letsencrypt: