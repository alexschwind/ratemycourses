# Generated by Django 5.2.6 on 2025-09-13 15:52

from django.db import migrations, models


def migrate_faculty_institute_data(apps, schema_editor):
    """Migrate existing faculty and institute data from CharField to ForeignKey"""
    Course = apps.get_model('courses', 'Course')
    Faculty = apps.get_model('courses', 'Faculty')
    Institute = apps.get_model('courses', 'Institute')
    
    # Create default faculty for courses with faculty data
    faculty_map = {}
    institute_map = {}
    
    # Process all courses
    for course in Course.objects.all():
        # Handle faculty migration
        if hasattr(course, 'faculty') and course.faculty and course.faculty.strip():
            faculty_name = course.faculty.strip()
            if faculty_name not in faculty_map:
                # Create faculty if it doesn't exist
                faculty, created = Faculty.objects.get_or_create(
                    name=faculty_name,
                    defaults={
                        'code': faculty_name[:10].upper().replace(' ', ''),
                        'description': f'Migrated faculty: {faculty_name}'
                    }
                )
                faculty_map[faculty_name] = faculty
            course.faculty_new = faculty_map[faculty_name]
        else:
            course.faculty_new = None
        
        # Handle institute migration
        if hasattr(course, 'institut') and course.institut and course.institut.strip():
            institute_name = course.institut.strip()
            if institute_name not in institute_map:
                # Create institute if it doesn't exist
                # Try to find a matching faculty, or create a default one
                faculty = course.faculty_new if course.faculty_new else None
                if not faculty and hasattr(course, 'faculty') and course.faculty and course.faculty.strip():
                    faculty_name = course.faculty.strip()
                    faculty = faculty_map.get(faculty_name)
                
                if not faculty:
                    # Create a default faculty
                    faculty, _ = Faculty.objects.get_or_create(
                        name='Unknown Faculty',
                        defaults={
                            'code': 'UNK',
                            'description': 'Default faculty for migrated institutes'
                        }
                    )
                
                institute, created = Institute.objects.get_or_create(
                    name=institute_name,
                    defaults={
                        'faculty': faculty,
                        'code': institute_name[:20].upper().replace(' ', ''),
                        'description': f'Migrated institute: {institute_name}'
                    }
                )
                institute_map[institute_name] = institute
            course.institute_new = institute_map[institute_name]
        else:
            course.institute_new = None
        
        course.save()


def reverse_migrate_faculty_institute_data(apps, schema_editor):
    """Reverse migration - copy data back to CharField"""
    Course = apps.get_model('courses', 'Course')
    
    for course in Course.objects.all():
        if course.faculty_new:
            course.faculty = course.faculty_new.name
        if course.institute_new:
            course.institut = course.institute_new.name
        course.save()


class Migration(migrations.Migration):

    dependencies = [
        ('courses', '0013_migrate_faculty_institute_data'),
    ]

    operations = [
        # Migrate data from old fields to new fields
        migrations.RunPython(
            migrate_faculty_institute_data,
            reverse_migrate_faculty_institute_data
        ),
        # Remove old CharField columns
        migrations.RemoveField(
            model_name='course',
            name='faculty',
        ),
        migrations.RemoveField(
            model_name='course',
            name='institut',
        ),
        # Rename new fields to final names
        migrations.RenameField(
            model_name='course',
            old_name='faculty_new',
            new_name='faculty',
        ),
        migrations.RenameField(
            model_name='course',
            old_name='institute_new',
            new_name='institute',
        ),
        # Update indexes - only remove the old one, new ones already exist
        migrations.RemoveIndex(
            model_name='course',
            name='courses_cou_institu_728020_idx',
        ),
    ]
